//
// File generated by /u/apps/root/5.34.36/root/bin/rootcint at Fri Feb 24 17:52:20 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dictsdILinux64RHEL7dITMCVXClassDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TMCVXClassDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void TMCVXClass_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TMCVXClass(void *p = 0);
   static void *newArray_TMCVXClass(Long_t size, void *p);
   static void delete_TMCVXClass(void *p);
   static void deleteArray_TMCVXClass(void *p);
   static void destruct_TMCVXClass(void *p);
   static void streamer_TMCVXClass(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TMCVXClass*)
   {
      ::TMCVXClass *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMCVXClass >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMCVXClass", ::TMCVXClass::Class_Version(), "./TMCVXClass.h", 9,
                  typeid(::TMCVXClass), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TMCVXClass::Dictionary, isa_proxy, 0,
                  sizeof(::TMCVXClass) );
      instance.SetNew(&new_TMCVXClass);
      instance.SetNewArray(&newArray_TMCVXClass);
      instance.SetDelete(&delete_TMCVXClass);
      instance.SetDeleteArray(&deleteArray_TMCVXClass);
      instance.SetDestructor(&destruct_TMCVXClass);
      instance.SetStreamerFunc(&streamer_TMCVXClass);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TMCVXClass*)
   {
      return GenerateInitInstanceLocal((::TMCVXClass*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMCVXClass*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TMCVXClass::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TMCVXClass::Class_Name()
{
   return "TMCVXClass";
}

//______________________________________________________________________________
const char *TMCVXClass::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TMCVXClass*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMCVXClass::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TMCVXClass*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMCVXClass::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TMCVXClass*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMCVXClass::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TMCVXClass*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TMCVXClass::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMCVXClass.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b >> tof;
      R__b >> flag;
      R__b.CheckByteCount(R__s, R__c, TMCVXClass::IsA());
   } else {
      R__c = R__b.WriteVersion(TMCVXClass::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << x;
      R__b << y;
      R__b << z;
      R__b << tof;
      R__b << flag;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TMCVXClass::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TMCVXClass.
      TClass *R__cl = ::TMCVXClass::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TMCVXClass(void *p) {
      return  p ? new(p) ::TMCVXClass : new ::TMCVXClass;
   }
   static void *newArray_TMCVXClass(Long_t nElements, void *p) {
      return p ? new(p) ::TMCVXClass[nElements] : new ::TMCVXClass[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMCVXClass(void *p) {
      delete ((::TMCVXClass*)p);
   }
   static void deleteArray_TMCVXClass(void *p) {
      delete [] ((::TMCVXClass*)p);
   }
   static void destruct_TMCVXClass(void *p) {
      typedef ::TMCVXClass current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TMCVXClass(TBuffer &buf, void *obj) {
      ((::TMCVXClass*)obj)->::TMCVXClass::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TMCVXClass

/********************************************************
* dicts/Linux64RHEL7/TMCVXClassDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTMCVXClassDict();

extern "C" void G__set_cpp_environmentTMCVXClassDict() {
  G__cpp_reset_tagtableTMCVXClassDict();
}
#include <new>
extern "C" int G__cpp_dllrevTMCVXClassDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TMCVXClass */
static int G__TMCVXClassDict_1110_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMCVXClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMCVXClass[n];
     } else {
       p = new((void*) gvp) TMCVXClass[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMCVXClass;
     } else {
       p = new((void*) gvp) TMCVXClass;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMCVXClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMCVXClass((TMCVXClass*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TMCVXClass((TMCVXClass*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMCVXClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMCVXClass((void*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TMCVXClass((void*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMCVXClass((void*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TMCVXClass((void*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMCVXClass*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMCVXClass::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMCVXClass::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMCVXClass::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMCVXClass::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMCVXClass*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMCVXClass::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMCVXClass::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMCVXClass::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TMCVXClassDict_1110_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMCVXClass::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TMCVXClassDict_1110_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMCVXClass* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMCVXClass(*(TMCVXClass*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMCVXClass G__TTMCVXClass;
static int G__TMCVXClassDict_1110_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMCVXClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMCVXClass*) (soff+(sizeof(TMCVXClass)*i)))->~G__TTMCVXClass();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMCVXClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMCVXClass*) (soff))->~G__TTMCVXClass();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TMCVXClassDict_1110_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMCVXClass* dest = (TMCVXClass*) G__getstructoffset();
   *dest = *(TMCVXClass*) libp->para[0].ref;
   const TMCVXClass& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TMCVXClass */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTMCVXClassDict {
 public:
  G__Sizep2memfuncTMCVXClassDict(): p(&G__Sizep2memfuncTMCVXClassDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTMCVXClassDict::*p)();
};

size_t G__get_sizep2memfuncTMCVXClassDict()
{
  G__Sizep2memfuncTMCVXClassDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTMCVXClassDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass))) {
     TMCVXClass *G__Lderived;
     G__Lderived=(TMCVXClass*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass),G__get_linked_tagnum(&G__TMCVXClassDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTMCVXClassDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__TMCVXClassDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TMCVXClass */
static void G__setup_memvarTMCVXClass(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass));
   { TMCVXClass *p; p=(TMCVXClass*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,"F   -1000.  2000.    ! x of vertex");
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,"F   -1000.  2000.    ! y");
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,"F   -1000.  2000.    ! z");
   G__memvar_setup((void*)((long)(&p->tof)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tof=",0,"F     0.0   999999.  ! secs of flight");
   G__memvar_setup((void*)((long)(&p->flag)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flag=",0,"I       0   65536    ! vertex flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TMCVXClassDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTMCVXClassDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTMCVXClass(void) {
   /* TMCVXClass */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass));
   G__memfunc_setup("TMCVXClass",904,G__TMCVXClassDict_1110_0_1, 105, G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMCVXClass",904,G__TMCVXClassDict_1110_0_2, 105, G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass), -1, 0, 1, 1, 1, 0, "U 'TMCVXClass' - 0 - Tmp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMCVXClass",904,G__TMCVXClassDict_1110_0_3, 105, G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass), -1, 0, 2, 1, 1, 0, 
"Y - - 0 - Tmp i - 'Int_t' 0 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TMCVXClassDict_1110_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TMCVXClassDict_1110_0_5, 85, G__get_linked_tagnum(&G__TMCVXClassDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMCVXClass::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TMCVXClassDict_1110_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMCVXClass::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TMCVXClassDict_1110_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMCVXClass::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TMCVXClassDict_1110_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMCVXClass::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TMCVXClassDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TMCVXClassDict_1110_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TMCVXClassDict_1110_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMCVXClass::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TMCVXClassDict_1110_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMCVXClass::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TMCVXClassDict_1110_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMCVXClass::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TMCVXClassDict_1110_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMCVXClass::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TMCVXClass", 904, G__TMCVXClassDict_1110_0_17, (int) ('i'), G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass), -1, 0, 1, 1, 1, 0, "u 'TMCVXClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMCVXClass", 1030, G__TMCVXClassDict_1110_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TMCVXClassDict_1110_0_19, (int) ('u'), G__get_linked_tagnum(&G__TMCVXClassDictLN_TMCVXClass), -1, 1, 1, 1, 1, 0, "u 'TMCVXClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTMCVXClassDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTMCVXClassDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTMCVXClassDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TMCVXClassDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__TMCVXClassDictLN_TMCVXClass = { "TMCVXClass" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTMCVXClassDict() {
  G__TMCVXClassDictLN_TClass.tagnum = -1 ;
  G__TMCVXClassDictLN_TBuffer.tagnum = -1 ;
  G__TMCVXClassDictLN_TMemberInspector.tagnum = -1 ;
  G__TMCVXClassDictLN_TObject.tagnum = -1 ;
  G__TMCVXClassDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__TMCVXClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TMCVXClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TMCVXClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TMCVXClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TMCVXClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TMCVXClassDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__TMCVXClassDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__TMCVXClassDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__TMCVXClassDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__TMCVXClassDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__TMCVXClassDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__TMCVXClassDictLN_TMCVXClass.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTMCVXClassDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TMCVXClassDictLN_TMCVXClass),sizeof(TMCVXClass),-1,62720,"Class for accessing the MCVX bank: Monte Carlo vertex.",G__setup_memvarTMCVXClass,G__setup_memfuncTMCVXClass);
}
extern "C" void G__cpp_setupTMCVXClassDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTMCVXClassDict()");
  G__set_cpp_environmentTMCVXClassDict();
  G__cpp_setup_tagtableTMCVXClassDict();

  G__cpp_setup_inheritanceTMCVXClassDict();

  G__cpp_setup_typetableTMCVXClassDict();

  G__cpp_setup_memvarTMCVXClassDict();

  G__cpp_setup_memfuncTMCVXClassDict();
  G__cpp_setup_globalTMCVXClassDict();
  G__cpp_setup_funcTMCVXClassDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTMCVXClassDict();
  return;
}
class G__cpp_setup_initTMCVXClassDict {
  public:
    G__cpp_setup_initTMCVXClassDict() { G__add_setup_func("TMCVXClassDict",(G__incsetup)(&G__cpp_setupTMCVXClassDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTMCVXClassDict() { G__remove_setup_func("TMCVXClassDict"); }
};
G__cpp_setup_initTMCVXClassDict G__cpp_setup_initializerTMCVXClassDict;

