//
// File generated by /u/apps/root/5.34.13/root/bin/rootcint at Fri Jan 20 19:15:26 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dictsdILinux64RHEL6dITEVNTClassDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TEVNTClassDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TEVNTClass_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TEVNTClass(void *p = 0);
   static void *newArray_TEVNTClass(Long_t size, void *p);
   static void delete_TEVNTClass(void *p);
   static void deleteArray_TEVNTClass(void *p);
   static void destruct_TEVNTClass(void *p);
   static void streamer_TEVNTClass(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TEVNTClass*)
   {
      ::TEVNTClass *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TEVNTClass >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TEVNTClass", ::TEVNTClass::Class_Version(), "./TEVNTClass.h", 29,
                  typeid(::TEVNTClass), DefineBehavior(ptr, ptr),
                  &::TEVNTClass::Dictionary, isa_proxy, 0,
                  sizeof(::TEVNTClass) );
      instance.SetNew(&new_TEVNTClass);
      instance.SetNewArray(&newArray_TEVNTClass);
      instance.SetDelete(&delete_TEVNTClass);
      instance.SetDeleteArray(&deleteArray_TEVNTClass);
      instance.SetDestructor(&destruct_TEVNTClass);
      instance.SetStreamerFunc(&streamer_TEVNTClass);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TEVNTClass*)
   {
      return GenerateInitInstanceLocal((::TEVNTClass*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TEVNTClass*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TEVNTClass::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TEVNTClass::Class_Name()
{
   return "TEVNTClass";
}

//______________________________________________________________________________
const char *TEVNTClass::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TEVNTClass*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TEVNTClass::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TEVNTClass*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TEVNTClass::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TEVNTClass*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TEVNTClass::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TEVNTClass*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TEVNTClass::Streamer(TBuffer &R__b)
{
   // Stream an object of class TEVNTClass.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TVirtualData::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TEVNTClass::IsA());
   } else {
      R__c = R__b.WriteVersion(TEVNTClass::IsA(), kTRUE);
      TVirtualData::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TEVNTClass::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TEVNTClass.
      TClass *R__cl = ::TEVNTClass::IsA();
      if (R__cl || R__insp.IsA()) { }
      TVirtualData::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TEVNTClass(void *p) {
      return  p ? new(p) ::TEVNTClass : new ::TEVNTClass;
   }
   static void *newArray_TEVNTClass(Long_t nElements, void *p) {
      return p ? new(p) ::TEVNTClass[nElements] : new ::TEVNTClass[nElements];
   }
   // Wrapper around operator delete
   static void delete_TEVNTClass(void *p) {
      delete ((::TEVNTClass*)p);
   }
   static void deleteArray_TEVNTClass(void *p) {
      delete [] ((::TEVNTClass*)p);
   }
   static void destruct_TEVNTClass(void *p) {
      typedef ::TEVNTClass current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TEVNTClass(TBuffer &buf, void *obj) {
      ((::TEVNTClass*)obj)->::TEVNTClass::Streamer(buf);
   }
} // end of namespace ROOT for class ::TEVNTClass

/********************************************************
* dicts/Linux64RHEL6/TEVNTClassDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTEVNTClassDict();

extern "C" void G__set_cpp_environmentTEVNTClassDict() {
  G__cpp_reset_tagtableTEVNTClassDict();
}
#include <new>
extern "C" int G__cpp_dllrevTEVNTClassDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TEVNTClass */
static int G__TEVNTClassDict_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TEVNTClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TEVNTClass[n];
     } else {
       p = new((void*) gvp) TEVNTClass[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TEVNTClass;
     } else {
       p = new((void*) gvp) TEVNTClass;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TEVNTClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TEVNTClass((TEVNTClass*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TEVNTClass((TEVNTClass*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TEVNTClass::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEVNTClass::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TEVNTClass::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TEVNTClass::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEVNTClass*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEVNTClass::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TEVNTClass::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEVNTClass::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEVNTClassDict_234_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TEVNTClass::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TEVNTClassDict_234_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TEVNTClass* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TEVNTClass(*(TEVNTClass*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TEVNTClass G__TTEVNTClass;
static int G__TEVNTClassDict_234_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TEVNTClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TEVNTClass*) (soff+(sizeof(TEVNTClass)*i)))->~G__TTEVNTClass();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TEVNTClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TEVNTClass*) (soff))->~G__TTEVNTClass();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TEVNTClassDict_234_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TEVNTClass* dest = (TEVNTClass*) G__getstructoffset();
   *dest = *(TEVNTClass*) libp->para[0].ref;
   const TEVNTClass& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TEVNTClass */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTEVNTClassDict {
 public:
  G__Sizep2memfuncTEVNTClassDict(): p(&G__Sizep2memfuncTEVNTClassDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTEVNTClassDict::*p)();
};

size_t G__get_sizep2memfuncTEVNTClassDict()
{
  G__Sizep2memfuncTEVNTClassDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTEVNTClassDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass))) {
     TEVNTClass *G__Lderived;
     G__Lderived=(TEVNTClass*)0x1000;
     {
       TVirtualData *G__Lpbase=(TVirtualData*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass),G__get_linked_tagnum(&G__TEVNTClassDictLN_TVirtualData),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass),G__get_linked_tagnum(&G__TEVNTClassDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTEVNTClassDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TEVNTClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TEVNTClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TEVNTClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TEVNTClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TEVNTClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TEVNTClass */
static void G__setup_memvarTEVNTClass(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass));
   { TEVNTClass *p; p=(TEVNTClass*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TEVNTClassDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTEVNTClassDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTEVNTClass(void) {
   /* TEVNTClass */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass));
   G__memfunc_setup("TEVNTClass",903,G__TEVNTClassDict_234_0_1, 105, G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TEVNTClass",903,G__TEVNTClassDict_234_0_2, 105, G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass), -1, 0, 1, 1, 1, 0, "U 'TEVNTClass' - 0 - TmpEVNT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEVNT",505,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "True, since it is an EVNT class", (void*) NULL, 1);
   G__memfunc_setup("IsGSIM",492,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "False...", (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TEVNTClassDict_234_0_6, 85, G__get_linked_tagnum(&G__TEVNTClassDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TEVNTClass::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TEVNTClassDict_234_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEVNTClass::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TEVNTClassDict_234_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TEVNTClass::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TEVNTClassDict_234_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TEVNTClass::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TEVNTClassDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TEVNTClassDict_234_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TEVNTClassDict_234_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEVNTClass::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TEVNTClassDict_234_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TEVNTClass::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TEVNTClassDict_234_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEVNTClass::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TEVNTClassDict_234_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TEVNTClass::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TEVNTClass", 903, G__TEVNTClassDict_234_0_18, (int) ('i'), G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass), -1, 0, 1, 1, 1, 0, "u 'TEVNTClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TEVNTClass", 1029, G__TEVNTClassDict_234_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TEVNTClassDict_234_0_20, (int) ('u'), G__get_linked_tagnum(&G__TEVNTClassDictLN_TEVNTClass), -1, 1, 1, 1, 1, 0, "u 'TEVNTClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTEVNTClassDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTEVNTClassDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTEVNTClassDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TEVNTClassDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TVirtualData = { "TVirtualData" , 99 , -1 };
G__linked_taginfo G__TEVNTClassDictLN_TEVNTClass = { "TEVNTClass" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTEVNTClassDict() {
  G__TEVNTClassDictLN_TClass.tagnum = -1 ;
  G__TEVNTClassDictLN_TBuffer.tagnum = -1 ;
  G__TEVNTClassDictLN_TMemberInspector.tagnum = -1 ;
  G__TEVNTClassDictLN_TObject.tagnum = -1 ;
  G__TEVNTClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TEVNTClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TEVNTClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TEVNTClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__TEVNTClassDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__TEVNTClassDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__TEVNTClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TEVNTClassDictLN_TVirtualData.tagnum = -1 ;
  G__TEVNTClassDictLN_TEVNTClass.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTEVNTClassDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TVirtualData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TEVNTClassDictLN_TEVNTClass),sizeof(TEVNTClass),-1,62720,"Class for accessing the EVNT bank: particle information",G__setup_memvarTEVNTClass,G__setup_memfuncTEVNTClass);
}
extern "C" void G__cpp_setupTEVNTClassDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTEVNTClassDict()");
  G__set_cpp_environmentTEVNTClassDict();
  G__cpp_setup_tagtableTEVNTClassDict();

  G__cpp_setup_inheritanceTEVNTClassDict();

  G__cpp_setup_typetableTEVNTClassDict();

  G__cpp_setup_memvarTEVNTClassDict();

  G__cpp_setup_memfuncTEVNTClassDict();
  G__cpp_setup_globalTEVNTClassDict();
  G__cpp_setup_funcTEVNTClassDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTEVNTClassDict();
  return;
}
class G__cpp_setup_initTEVNTClassDict {
  public:
    G__cpp_setup_initTEVNTClassDict() { G__add_setup_func("TEVNTClassDict",(G__incsetup)(&G__cpp_setupTEVNTClassDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTEVNTClassDict() { G__remove_setup_func("TEVNTClassDict"); }
};
G__cpp_setup_initTEVNTClassDict G__cpp_setup_initializerTEVNTClassDict;

