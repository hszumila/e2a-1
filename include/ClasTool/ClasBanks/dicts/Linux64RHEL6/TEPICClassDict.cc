//
// File generated by /u/apps/root/5.34.13/root/bin/rootcint at Fri Jan 20 19:15:24 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dictsdILinux64RHEL6dITEPICClassDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TEPICClassDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TEPICClass_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TEPICClass(void *p = 0);
   static void *newArray_TEPICClass(Long_t size, void *p);
   static void delete_TEPICClass(void *p);
   static void deleteArray_TEPICClass(void *p);
   static void destruct_TEPICClass(void *p);
   static void streamer_TEPICClass(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TEPICClass*)
   {
      ::TEPICClass *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TEPICClass >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TEPICClass", ::TEPICClass::Class_Version(), "./TEPICClass.h", 21,
                  typeid(::TEPICClass), DefineBehavior(ptr, ptr),
                  &::TEPICClass::Dictionary, isa_proxy, 0,
                  sizeof(::TEPICClass) );
      instance.SetNew(&new_TEPICClass);
      instance.SetNewArray(&newArray_TEPICClass);
      instance.SetDelete(&delete_TEPICClass);
      instance.SetDeleteArray(&deleteArray_TEPICClass);
      instance.SetDestructor(&destruct_TEPICClass);
      instance.SetStreamerFunc(&streamer_TEPICClass);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TEPICClass*)
   {
      return GenerateInitInstanceLocal((::TEPICClass*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TEPICClass*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TEPICClass::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TEPICClass::Class_Name()
{
   return "TEPICClass";
}

//______________________________________________________________________________
const char *TEPICClass::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TEPICClass*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TEPICClass::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TEPICClass*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TEPICClass::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TEPICClass*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TEPICClass::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TEPICClass*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TEPICClass::Streamer(TBuffer &R__b)
{
   // Stream an object of class TEPICClass.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      EPIC->Streamer(R__b);
      R__b >> First_Phys;
      R__b >> Last_Phys;
      R__b >> runno;
      R__b >> First_Phys_time;
      R__b >> Last_Phys_time;
      R__b >> Evt_time;
      R__b.CheckByteCount(R__s, R__c, TEPICClass::IsA());
   } else {
      R__c = R__b.WriteVersion(TEPICClass::IsA(), kTRUE);
      TObject::Streamer(R__b);
      EPIC->Streamer(R__b);
      R__b << First_Phys;
      R__b << Last_Phys;
      R__b << runno;
      R__b << First_Phys_time;
      R__b << Last_Phys_time;
      R__b << Evt_time;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TEPICClass::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TEPICClass.
      TClass *R__cl = ::TEPICClass::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*EPIC", &EPIC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "First_Phys", &First_Phys);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Last_Phys", &Last_Phys);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runno", &runno);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "First_Phys_time", &First_Phys_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Last_Phys_time", &Last_Phys_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Evt_time", &Evt_time);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TEPICClass(void *p) {
      return  p ? new(p) ::TEPICClass : new ::TEPICClass;
   }
   static void *newArray_TEPICClass(Long_t nElements, void *p) {
      return p ? new(p) ::TEPICClass[nElements] : new ::TEPICClass[nElements];
   }
   // Wrapper around operator delete
   static void delete_TEPICClass(void *p) {
      delete ((::TEPICClass*)p);
   }
   static void deleteArray_TEPICClass(void *p) {
      delete [] ((::TEPICClass*)p);
   }
   static void destruct_TEPICClass(void *p) {
      typedef ::TEPICClass current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TEPICClass(TBuffer &buf, void *obj) {
      ((::TEPICClass*)obj)->::TEPICClass::Streamer(buf);
   }
} // end of namespace ROOT for class ::TEPICClass

/********************************************************
* dicts/Linux64RHEL6/TEPICClassDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTEPICClassDict();

extern "C" void G__set_cpp_environmentTEPICClassDict() {
  G__cpp_reset_tagtableTEPICClassDict();
}
#include <new>
extern "C" int G__cpp_dllrevTEPICClassDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TEPICClass */
static int G__TEPICClassDict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TEPICClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TEPICClass[n];
     } else {
       p = new((void*) gvp) TEPICClass[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TEPICClass;
     } else {
       p = new((void*) gvp) TEPICClass;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TEPICClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TEPICClass((TEPICClass*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TEPICClass((TEPICClass*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->AddEPIC((TEPICValue*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->AddEPICAt((TEPICValue*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->SetFirst_Phys((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->SetLast_Phys((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->Setrunno((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->SetFirst_Phys_time((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->SetLast_Phys_time((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->SetEvt_time((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TEPICClass*) G__getstructoffset())->GetValueIndex(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TEPICClass*) G__getstructoffset())->GetValue((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TEPICClass*) G__getstructoffset())->GetValue(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((TEPICClass*) G__getstructoffset())->GetName((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TEPICClass::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEPICClass::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TEPICClass::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TEPICClass::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEPICClass*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEPICClass::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TEPICClass::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEPICClass::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TEPICClassDict_232_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TEPICClass::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TEPICClassDict_232_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TEPICClass* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TEPICClass(*(TEPICClass*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TEPICClass G__TTEPICClass;
static int G__TEPICClassDict_232_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TEPICClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TEPICClass*) (soff+(sizeof(TEPICClass)*i)))->~G__TTEPICClass();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TEPICClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TEPICClass*) (soff))->~G__TTEPICClass();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TEPICClassDict_232_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TEPICClass* dest = (TEPICClass*) G__getstructoffset();
   *dest = *(TEPICClass*) libp->para[0].ref;
   const TEPICClass& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TEPICClass */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTEPICClassDict {
 public:
  G__Sizep2memfuncTEPICClassDict(): p(&G__Sizep2memfuncTEPICClassDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTEPICClassDict::*p)();
};

size_t G__get_sizep2memfuncTEPICClassDict()
{
  G__Sizep2memfuncTEPICClassDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTEPICClassDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass))) {
     TEPICClass *G__Lderived;
     G__Lderived=(TEPICClass*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass),G__get_linked_tagnum(&G__TEPICClassDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTEPICClassDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TEPICClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TEPICClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TEPICClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TEPICClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TEPICClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TEPICClass */
static void G__setup_memvarTEPICClass(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass));
   { TEPICClass *p; p=(TEPICClass*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->EPIC)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__TEPICClassDictLN_TClonesArray),-1,-1,1,"EPIC=",0,"a TClonesArray containing the names and values");
   G__memvar_setup((void*)((long)(&p->First_Phys)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"First_Phys=",0,"the event number of the first physics event after the previous EPIC event");
   G__memvar_setup((void*)((long)(&p->Last_Phys)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Last_Phys=",0,"the event number of the last physics event before this EPIC event");
   G__memvar_setup((void*)((long)(&p->runno)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"runno=",0,"the run number of this EPIC event");
   G__memvar_setup((void*)((long)(&p->First_Phys_time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"First_Phys_time=",0,"the time of the first physics event after the previous EPIC event");
   G__memvar_setup((void*)((long)(&p->Last_Phys_time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Last_Phys_time=",0,"the time of the last physics event before this EPIC event");
   G__memvar_setup((void*)((long)(&p->Evt_time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Evt_time=",0,"the time of this EPIC event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TEPICClassDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTEPICClassDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTEPICClass(void) {
   /* TEPICClass */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass));
   G__memfunc_setup("TEPICClass",875,G__TEPICClassDict_232_0_1, 105, G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TEPICClass",875,G__TEPICClassDict_232_0_2, 105, G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass), -1, 0, 1, 1, 1, 0, "U 'TEPICClass' - 0 - TmpEPIC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEPIC",554,G__TEPICClassDict_232_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TEPICValue' - 0 - ep", "Only for adding a TEPICValue to the EPIC array", (void*) NULL, 0);
   G__memfunc_setup("AddEPICAt",735,G__TEPICClassDict_232_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TEPICValue' - 0 - ep i - 'Int_t' 0 - place", "Only for TEPICValue", (void*) NULL, 0);
   G__memfunc_setup("SetFirst_Phys",1335,G__TEPICClassDict_232_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - First", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLast_Phys",1219,G__TEPICClassDict_232_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setrunno",862,G__TEPICClassDict_232_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirst_Phys_time",1861,G__TEPICClassDict_232_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - First", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLast_Phys_time",1745,G__TEPICClassDict_232_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvt_time",1129,G__TEPICClassDict_232_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__TEPICClassDict_232_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValueIndex",1301,G__TEPICClassDict_232_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - member", "This function is for use in combination with", (void*) NULL, 0);
   G__memfunc_setup("GetValue",797,G__TEPICClassDict_232_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", "GetValue(Int_t) when looping over many events", (void*) NULL, 0);
   G__memfunc_setup("GetValue",797,G__TEPICClassDict_232_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - member", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__TEPICClassDict_232_0_15, 117, G__get_linked_tagnum(&G__TEPICClassDictLN_TString), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TEPICClassDict_232_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TEPICClassDict_232_0_17, 85, G__get_linked_tagnum(&G__TEPICClassDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TEPICClass::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TEPICClassDict_232_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEPICClass::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TEPICClassDict_232_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TEPICClass::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TEPICClassDict_232_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TEPICClass::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TEPICClassDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TEPICClassDict_232_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TEPICClassDict_232_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEPICClass::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TEPICClassDict_232_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TEPICClass::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TEPICClassDict_232_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEPICClass::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TEPICClassDict_232_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TEPICClass::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TEPICClass", 875, G__TEPICClassDict_232_0_29, (int) ('i'), G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass), -1, 0, 1, 1, 1, 0, "u 'TEPICClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TEPICClass", 1001, G__TEPICClassDict_232_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TEPICClassDict_232_0_31, (int) ('u'), G__get_linked_tagnum(&G__TEPICClassDictLN_TEPICClass), -1, 1, 1, 1, 1, 0, "u 'TEPICClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTEPICClassDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTEPICClassDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTEPICClassDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TEPICClassDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TEPICValue = { "TEPICValue" , 99 , -1 };
G__linked_taginfo G__TEPICClassDictLN_TEPICClass = { "TEPICClass" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTEPICClassDict() {
  G__TEPICClassDictLN_TClass.tagnum = -1 ;
  G__TEPICClassDictLN_TBuffer.tagnum = -1 ;
  G__TEPICClassDictLN_TMemberInspector.tagnum = -1 ;
  G__TEPICClassDictLN_TObject.tagnum = -1 ;
  G__TEPICClassDictLN_TString.tagnum = -1 ;
  G__TEPICClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TEPICClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TEPICClassDictLN_TClonesArray.tagnum = -1 ;
  G__TEPICClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TEPICClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__TEPICClassDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__TEPICClassDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__TEPICClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TEPICClassDictLN_TEPICValue.tagnum = -1 ;
  G__TEPICClassDictLN_TEPICClass.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTEPICClassDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TString);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TEPICValue);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TEPICClassDictLN_TEPICClass),sizeof(TEPICClass),-1,62720,"Class for accessing the EPIC bank, Beam information",G__setup_memvarTEPICClass,G__setup_memfuncTEPICClass);
}
extern "C" void G__cpp_setupTEPICClassDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTEPICClassDict()");
  G__set_cpp_environmentTEPICClassDict();
  G__cpp_setup_tagtableTEPICClassDict();

  G__cpp_setup_inheritanceTEPICClassDict();

  G__cpp_setup_typetableTEPICClassDict();

  G__cpp_setup_memvarTEPICClassDict();

  G__cpp_setup_memfuncTEPICClassDict();
  G__cpp_setup_globalTEPICClassDict();
  G__cpp_setup_funcTEPICClassDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTEPICClassDict();
  return;
}
class G__cpp_setup_initTEPICClassDict {
  public:
    G__cpp_setup_initTEPICClassDict() { G__add_setup_func("TEPICClassDict",(G__incsetup)(&G__cpp_setupTEPICClassDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTEPICClassDict() { G__remove_setup_func("TEPICClassDict"); }
};
G__cpp_setup_initTEPICClassDict G__cpp_setup_initializerTEPICClassDict;

