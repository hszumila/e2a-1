//
// File generated by /u/apps/root/5.34.13/root/bin/rootcint at Fri Jan 20 19:16:48 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dictsdILinux64RHEL6dITQueryDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TQueryDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TQuery_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TQuery(void *p = 0);
   static void *newArray_TQuery(Long_t size, void *p);
   static void delete_TQuery(void *p);
   static void deleteArray_TQuery(void *p);
   static void destruct_TQuery(void *p);
   static void streamer_TQuery(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TQuery*)
   {
      ::TQuery *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TQuery >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TQuery", ::TQuery::Class_Version(), "./TQuery.h", 30,
                  typeid(::TQuery), DefineBehavior(ptr, ptr),
                  &::TQuery::Dictionary, isa_proxy, 0,
                  sizeof(::TQuery) );
      instance.SetNew(&new_TQuery);
      instance.SetNewArray(&newArray_TQuery);
      instance.SetDelete(&delete_TQuery);
      instance.SetDeleteArray(&deleteArray_TQuery);
      instance.SetDestructor(&destruct_TQuery);
      instance.SetStreamerFunc(&streamer_TQuery);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TQuery*)
   {
      return GenerateInitInstanceLocal((::TQuery*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TQuery*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TQuery::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TQuery::Class_Name()
{
   return "TQuery";
}

//______________________________________________________________________________
const char *TQuery::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TQuery*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TQuery::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TQuery*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TQuery::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TQuery*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TQuery::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TQuery*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TQuery::Streamer(TBuffer &R__b)
{
   // Stream an object of class TQuery.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fQuery.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TQuery::IsA());
   } else {
      R__c = R__b.WriteVersion(TQuery::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fQuery.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TQuery::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TQuery.
      TClass *R__cl = ::TQuery::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQuery", &fQuery);
      R__insp.InspectMember(fQuery, "fQuery.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TQuery(void *p) {
      return  p ? new(p) ::TQuery : new ::TQuery;
   }
   static void *newArray_TQuery(Long_t nElements, void *p) {
      return p ? new(p) ::TQuery[nElements] : new ::TQuery[nElements];
   }
   // Wrapper around operator delete
   static void delete_TQuery(void *p) {
      delete ((::TQuery*)p);
   }
   static void deleteArray_TQuery(void *p) {
      delete [] ((::TQuery*)p);
   }
   static void destruct_TQuery(void *p) {
      typedef ::TQuery current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TQuery(TBuffer &buf, void *obj) {
      ((::TQuery*)obj)->::TQuery::Streamer(buf);
   }
} // end of namespace ROOT for class ::TQuery

/********************************************************
* dicts/Linux64RHEL6/TQueryDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTQueryDict();

extern "C" void G__set_cpp_environmentTQueryDict() {
  G__cpp_reset_tagtableTQueryDict();
}
#include <new>
extern "C" int G__cpp_dllrevTQueryDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TQuery */
static int G__TQueryDict_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TQuery* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TQuery[n];
     } else {
       p = new((void*) gvp) TQuery[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TQuery;
     } else {
       p = new((void*) gvp) TQuery;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TQueryDictLN_TQuery));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TQuery*) G__getstructoffset())->Data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TQuery*) G__getstructoffset())->Preview();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TQuery*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TQuery& obj = ((TQuery*) G__getstructoffset())->operator<<((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TQuery& obj = ((TQuery*) G__getstructoffset())->operator<<((float) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TQuery& obj = ((TQuery*) G__getstructoffset())->operator<<((const char*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((TQuery*) G__getstructoffset())->FloatOf((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((TQuery*) G__getstructoffset())->FloatOf());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((TQuery*) G__getstructoffset())->IntOf((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((TQuery*) G__getstructoffset())->IntOf());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TQuery::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TQuery::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TQuery::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TQuery::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TQuery*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TQuery::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TQuery::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TQuery::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TQueryDict_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TQuery::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TQueryDict_225_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TQuery* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TQuery(*(TQuery*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TQueryDictLN_TQuery));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TQuery G__TTQuery;
static int G__TQueryDict_225_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TQuery*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TQuery*) (soff+(sizeof(TQuery)*i)))->~G__TTQuery();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TQuery*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TQuery*) (soff))->~G__TTQuery();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TQueryDict_225_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TQuery* dest = (TQuery*) G__getstructoffset();
   *dest = *(TQuery*) libp->para[0].ref;
   const TQuery& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TQuery */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTQueryDict {
 public:
  G__Sizep2memfuncTQueryDict(): p(&G__Sizep2memfuncTQueryDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTQueryDict::*p)();
};

size_t G__get_sizep2memfuncTQueryDict()
{
  G__Sizep2memfuncTQueryDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTQueryDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TQueryDictLN_TQuery))) {
     TQuery *G__Lderived;
     G__Lderived=(TQuery*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TQueryDictLN_TQuery),G__get_linked_tagnum(&G__TQueryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTQueryDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TQueryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TQueryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TQueryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TQueryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TQueryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TQueryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TQueryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TQueryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TQueryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TQueryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TQueryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TQueryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TQueryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TQueryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TQueryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TQuery */
static void G__setup_memvarTQuery(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TQueryDictLN_TQuery));
   { TQuery *p; p=(TQuery*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fQuery)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TQueryDictLN_TString),-1,-1,1,"fQuery=",0,"String with query");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TQueryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTQueryDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTQuery(void) {
   /* TQuery */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TQueryDictLN_TQuery));
   G__memfunc_setup("TQuery",618,G__TQueryDict_225_0_1, 105, G__get_linked_tagnum(&G__TQueryDictLN_TQuery), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Data",378,G__TQueryDict_225_0_2, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Preview",738,G__TQueryDict_225_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__TQueryDict_225_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__TQueryDict_225_0_5, 117, G__get_linked_tagnum(&G__TQueryDictLN_TQuery), -1, 1, 1, 1, 1, 0, "i - - 0 - x_int", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__TQueryDict_225_0_6, 117, G__get_linked_tagnum(&G__TQueryDictLN_TQuery), -1, 1, 1, 1, 1, 0, "f - - 0 - x_float", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__TQueryDict_225_0_7, 117, G__get_linked_tagnum(&G__TQueryDictLN_TQuery), -1, 1, 1, 1, 1, 0, "C - - 10 - n_char", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FloatOf",683,G__TQueryDict_225_0_8, 102, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"0.0\"' chr_float", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IntOf",480,G__TQueryDict_225_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 '\"0\"' chr_int", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TQueryDict_225_0_10, 85, G__get_linked_tagnum(&G__TQueryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TQuery::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TQueryDict_225_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TQuery::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TQueryDict_225_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TQuery::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TQueryDict_225_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TQuery::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TQueryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TQueryDict_225_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TQueryDict_225_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TQuery::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TQueryDict_225_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TQuery::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TQueryDict_225_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TQuery::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TQueryDict_225_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TQuery::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TQuery", 618, G__TQueryDict_225_0_22, (int) ('i'), G__get_linked_tagnum(&G__TQueryDictLN_TQuery), -1, 0, 1, 1, 1, 0, "u 'TQuery' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TQuery", 744, G__TQueryDict_225_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TQueryDict_225_0_24, (int) ('u'), G__get_linked_tagnum(&G__TQueryDictLN_TQuery), -1, 1, 1, 1, 1, 0, "u 'TQuery' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTQueryDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTQueryDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTQueryDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TQueryDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TQueryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TQueryDictLN_TQuery = { "TQuery" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTQueryDict() {
  G__TQueryDictLN_TClass.tagnum = -1 ;
  G__TQueryDictLN_TBuffer.tagnum = -1 ;
  G__TQueryDictLN_TMemberInspector.tagnum = -1 ;
  G__TQueryDictLN_TObject.tagnum = -1 ;
  G__TQueryDictLN_TString.tagnum = -1 ;
  G__TQueryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TQueryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TQueryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TQueryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TQueryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TQueryDictLN_TQuery.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTQueryDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_TString);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TQueryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TQueryDictLN_TQuery),sizeof(TQuery),-1,29952,"Class to construct MySQL Queries",G__setup_memvarTQuery,G__setup_memfuncTQuery);
}
extern "C" void G__cpp_setupTQueryDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTQueryDict()");
  G__set_cpp_environmentTQueryDict();
  G__cpp_setup_tagtableTQueryDict();

  G__cpp_setup_inheritanceTQueryDict();

  G__cpp_setup_typetableTQueryDict();

  G__cpp_setup_memvarTQueryDict();

  G__cpp_setup_memfuncTQueryDict();
  G__cpp_setup_globalTQueryDict();
  G__cpp_setup_funcTQueryDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTQueryDict();
  return;
}
class G__cpp_setup_initTQueryDict {
  public:
    G__cpp_setup_initTQueryDict() { G__add_setup_func("TQueryDict",(G__incsetup)(&G__cpp_setupTQueryDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTQueryDict() { G__remove_setup_func("TQueryDict"); }
};
G__cpp_setup_initTQueryDict G__cpp_setup_initializerTQueryDict;

